<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>STB - SparcoTuneBuilder</title>
    <!-- Importa Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Importa il font Montserrat -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            background-color: #000;
            color: #fff;
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            font-family: 'Montserrat', sans-serif;
        }

        .container {
            background-color: #1a1a1a;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            margin: 1rem;
            width: 100%;
            max-width: 600px;
        }

        h1, h2, h3 {
            color: white;
            text-align: center;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            border-radius: 1rem; /* rounded-5 */
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004bb1;
        }

        .form-control {
            background-color: #333;
            border: 1px solid #444;
            color: #fff;
        }

        .form-control:focus {
            background-color: #444;
            border-color: #00f;
            color: #fff;
        }

        #results {
            position: absolute;
            width: 100%;
            z-index: 1000;
        }

        #progressSection, #videoSection {
            display: none;
        }

        .album-item {
            position: relative;
            text-align: center;
            margin-bottom: 30px; /* Aumenta il margine per separare le righe */
        }

        .album-item img {
            width: 150px;
            height: 150px;
            object-fit: cover; /* Assicura che l'immagine non sia distorta */
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease; /* Aggiunge un leggero effetto di zoom al passaggio del mouse */
        }

        .album-item img:hover {
            transform: scale(1.05); /* Effetto di zoom al passaggio del mouse */
        }

        .album-item button {
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            width: 120px; /* Può essere aumentato o ridotto in base alla dimensione del pulsante */
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 20px;
            font-size: 14px;
        }

        .album-item button:hover {
            background-color: #0056b3;
        }

        /* Stile per il modal di pubblicazione */
        .modal-content.custom-modal {
            background-color: #000;
            color: #fff;
        }

        .modal-header.custom-modal-header,
        .modal-footer.custom-modal-footer {
            border-color: #444;
        }

        .modal-header.custom-modal-header .close {
            color: #fff;
        }

        .modal-footer.custom-modal-footer .btn-secondary {
            background-color: #444;
            border-color: #444;
        }

        .modal-footer.custom-modal-footer .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        /* Stile per i bottoni "sped up" e "slowed + reverber" */
        .title-modifier-btn {
            margin: 0.5rem;
        }

    </style>
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar navbar-dark bg-dark w-100">
        <div class="container-fluid justify-content-center">
            <a class="navbar-brand d-flex align-items-center" href="#">
                <img src="https://marcobarbagallo.altervista.org/Gallery/sparco_app.png" alt="Logo" width="25" height="auto" class="d-inline-block align-text-top rounded-4 me-2">
                SparcoTuneBuilder
            </a>
        </div>
    </nav>

    <div class="container">
        <!-- Sezione di ricerca -->
        <div class="search-section mt-4">
            <!-- <h1 class="text-center">Cerca un Video Musicale</h1> -->
            <form id="searchForm" class="mt-4">
                <div class="form-group position-relative">
                    <input type="text" class="form-control form-control-lg" id="songTitle" placeholder="Inserisci il titolo della canzone" autocomplete="off" required>
                    <div class="list-group" id="results"></div>
                </div>
                <!-- Campi nascosti per l'invio dei dati -->
                <input type="hidden" name="videoId" id="selectedVideoId">
                <input type="hidden" name="videoTitle" id="selectedVideoTitle">
                <input type="hidden" name="videoThumbnailUrl" id="selectedVideoThumbnailUrl">
                <div class="text-center mt-4">
                    <button type="button" class="btn btn-primary btn-lg rounded-5" id="downloadMediaButton" disabled> <!-- scarica audio e copertina -->
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M3 19H21V21H3V19ZM13 13.1716L19.0711 7.1005L20.4853 8.51472L12 17L3.51472 8.51472L4.92893 7.1005L11 13.1716V2H13V13.1716Z"></path></svg> 
                    
                    </button>
                </div>
            </form>
            
            <!-- Sezione per inserire il testo personalizzato, modificare velocità e pitch, e creare il video -->
            <div id="customTextSection" class="mt-5" style="display:none;">
                <h3>Inserisci il testo da visualizzare sul video</h3>
                <div class="form-group mt-4">
                    <input type="text" class="form-control form-control-lg" id="customText" placeholder="Inserisci il testo" value="Testo di default">
                </div>

                <!-- Slider per modificare la velocità -->
                <div class="form-group mt-4">
                    <label for="speedRange">Modifica velocità (0.5x - 1.5x): <span id="speedValue">1.0</span>x</label>
                    <input type="range" class="form-control-range" id="speedRange" min="0.5" max="1.5" step="0.1" value="1">
                </div>

                <!-- Slider per modificare il pitch -->
                <div class="form-group mt-4">
                    <label for="pitchRange">Modifica pitch (0.5x - 1.5x): <span id="pitchValue">1.0</span>x</label>
                    <input type="range" class="form-control-range" id="pitchRange" min="0.5" max="1.5" step="0.1" value="1">
                </div>

                <!-- Bottone per cercare singoli/album su Spotify -->
                <div class="text-center mt-4">
                    <button type="button" class="btn btn-success btn-lg rounded-5" id="searchSpotifyAlbumsButton" style="display:none;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M12.001 2C6.50098 2 2.00098 6.5 2.00098 12C2.00098 17.5 6.50098 22 12.001 22C17.501 22 22.001 17.5 22.001 12C22.001 6.5 17.551 2 12.001 2ZM15.751 16.65C13.401 15.2 10.451 14.8992 6.95014 15.6992C6.60181 15.8008 6.30098 15.55 6.20098 15.25C6.10098 14.8992 6.35098 14.6 6.65098 14.5C10.451 13.6492 13.751 14 16.351 15.6C16.701 15.75 16.7501 16.1492 16.6018 16.45C16.4018 16.7492 16.0518 16.85 15.751 16.65ZM16.7501 13.95C14.051 12.3 9.95098 11.8 6.80098 12.8C6.40181 12.9 5.95098 12.7 5.85098 12.3C5.75098 11.9 5.95098 11.4492 6.35098 11.3492C10.001 10.25 14.501 10.8008 17.601 12.7C17.9018 12.8508 18.051 13.35 17.8018 13.7C17.551 14.05 17.101 14.2 16.7501 13.95ZM6.30098 9.75083C5.80098 9.9 5.30098 9.6 5.15098 9.15C5.00098 8.64917 5.30098 8.15 5.75098 7.99917C9.30098 6.94917 15.151 7.14917 18.8518 9.35C19.301 9.6 19.451 10.2 19.201 10.65C18.9518 11.0008 18.351 11.1492 17.9018 10.9C14.701 9 9.35098 8.8 6.30098 9.75083Z"></path></svg>
                    </button>
                </div>

                <!-- Sezione Slider per selezione colore sfondo -->
                <div class="form-group mt-4 text-center">
                    <label for="backgroundColorSwitch">Seleziona colore di sfondo: </label>
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="backgroundColorSwitch">
                        <label class="custom-control-label" for="backgroundColorSwitch" id="backgroundColorLabel">Spedup (Blu)</label>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="button" class="btn btn-primary btn-lg rounded-5" id="createVideoButton">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M16 4C16.5523 4 17 4.44772 17 5V9.2L22.2133 5.55071C22.4395 5.39235 22.7513 5.44737 22.9096 5.6736C22.9684 5.75764 23 5.85774 23 5.96033V18.0397C23 18.3158 22.7761 18.5397 22.5 18.5397C22.3974 18.5397 22.2973 18.5081 22.2133 18.4493L17 14.8V19C17 19.5523 16.5523 20 16 20H2C1.44772 20 1 19.5523 1 19V5C1 4.44772 1.44772 4 2 4H16ZM8 8V11H5V13H7.999L8 16H10L9.999 13H13V11H10V8H8Z"></path></svg>
                    </button>
                </div>
            </div>

            <!-- Modal per mostrare le copertine degli album -->
            <div class="modal fade" id="albumModal" tabindex="-1" aria-labelledby="albumModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="albumModalLabel">Seleziona una Copertina di Spotify</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Chiudi">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <h4>Cerca Copertina</h4>
                                <input type="text" id="coverSearchInput" placeholder="Cerca copertina..." oninput="searchCover()">
                                <div id="coverResults"></div>
                            <div id="albumResults" class="row-col-auto">
                                <!-- Le copertine degli album appariranno qui -->
                            </div>
                            <div id="selectedCoverContainer">
                                <h4>Copertina Selezionata:</h4>
                                <img id="selectedCover" src="" alt="Copertina Selezionata" width="200">
                                <button class="btn btn-primary select-album-button rounded-5">Seleziona</button>
                              </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary rounded-5" data-dismiss="modal">Chiudi</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal per pubblicare su YouTube hi how are you-->
            <div class="modal fade" id="publishModal" tabindex="-1" role="dialog" aria-labelledby="publishModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                  <div class="modal-content custom-modal">
                    <div class="modal-header custom-modal-header">
                      <h5 class="modal-title" id="publishModalLabel">Pubblica su YouTube</h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                      </button>
                    </div>
                    <div class="modal-body">
                      <form id="publishForm">
                        <div class="form-group">
                          <label for="videoTitleModal">Titolo del video</label>
                          <input type="text" class="form-control" id="videoTitleModal" required>
                        </div>
                        <!-- Bottoni per aggiungere "sped up" o "slowed + reverber" -->
                        <div class="text-center mb-3">
                            <button type="button" class="btn btn-secondary title-modifier-btn" id="addSpedUp">𝘀𝗽𝗲𝗱 𝘂𝗽</button>
                            <button type="button" class="btn btn-secondary title-modifier-btn" id="addSlowedReverb">𝘀𝗹𝗼𝘄𝗲𝗱 + 𝗿𝗲𝘃𝗲𝗿𝗯</button>
                        </div>
                        <div class="form-group">
                          <label for="videoDescription">Descrizione</label>
                          <textarea class="form-control" id="videoDescription" rows="3" required></textarea>
                        </div>
                        <div class="form-group">
                          <label for="videoTags">Tag (separati da virgole)</label>
                          <input type="text" class="form-control" id="videoTags" placeholder="es. musica, canzone">
                        </div>
                        <div class="form-group">
                          <label for="videoPrivacy">Privacy</label>
                          <select class="form-control" id="videoPrivacy">
                            <option value="public">Public</option>
                            <option value="unlisted">Unlisted</option>
                            <option value="private">Private</option>
                          </select>
                        </div>
                      </form>
                    </div>
                    <div class="modal-footer custom-modal-footer">
                      <button type="button" class="btn btn-secondary rounded-5" data-dismiss="modal">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 10.5858L9.17157 7.75736L7.75736 9.17157L10.5858 12L7.75736 14.8284L9.17157 16.2426L12 13.4142L14.8284 16.2426L16.2426 14.8284L13.4142 12L16.2426 9.17157L14.8284 7.75736L12 10.5858Z"></path></svg>
                      </button>
                      <button type="button" class="btn btn-danger rounded-5" id="publishButton">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M12.2439 4C12.778 4.00294 14.1143 4.01586 15.5341 4.07273L16.0375 4.09468C17.467 4.16236 18.8953 4.27798 19.6037 4.4755C20.5486 4.74095 21.2913 5.5155 21.5423 6.49732C21.942 8.05641 21.992 11.0994 21.9982 11.8358L21.9991 11.9884L21.9991 11.9991C21.9991 11.9991 21.9991 12.0028 21.9991 12.0099L21.9982 12.1625C21.992 12.8989 21.942 15.9419 21.5423 17.501C21.2878 18.4864 20.5451 19.261 19.6037 19.5228C18.8953 19.7203 17.467 19.8359 16.0375 19.9036L15.5341 19.9255C14.1143 19.9824 12.778 19.9953 12.2439 19.9983L12.0095 19.9991L11.9991 19.9991C11.9991 19.9991 11.9956 19.9991 11.9887 19.9991L11.7545 19.9983C10.6241 19.9921 5.89772 19.941 4.39451 19.5228C3.4496 19.2573 2.70692 18.4828 2.45587 17.501C2.0562 15.9419 2.00624 12.8989 2 12.1625V11.8358C2.00624 11.0994 2.0562 8.05641 2.45587 6.49732C2.7104 5.51186 3.45308 4.73732 4.39451 4.4755C5.89772 4.05723 10.6241 4.00622 11.7545 4H12.2439ZM9.99911 8.49914V15.4991L15.9991 11.9991L9.99911 8.49914Z"></path></svg>
                      </button>
                      <button type="button" class="btn btn-warning rounded-5" id="fetchLyricsButtonModal">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M21 9V20.9925C21 21.5511 20.5552 22 20.0066 22H3.9934C3.44495 22 3 21.556 3 21.0082V2.9918C3 2.45531 3.44694 2 3.99826 2H14V8C14 8.55228 14.4477 9 15 9H21ZM21 7H16V2.00318L21 7ZM8 7V9H11V7H8ZM8 11V13H16V11H8ZM8 15V17H16V15H8Z"></path></svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>

        </div>

        <!-- Sezione per visualizzare i progressi -->
        <div id="progressSection" class="text-center mt-5">
            <h3 id="progressMessage">Preparazione in corso...</h3>
        </div>

        <!-- Sezione per visualizzare il video creato -->
        <div id="videoSection" class="text-center mt-5">
            <h2 id="videoTitle"></h2>
            <div class="ratio ratio-16x9">
                <video id="createdVideo" class="w-100" controls></video>
            </div>
            <button type="button" class="btn btn-danger btn-xl mt-4 rounded-5" data-toggle="modal" data-target="#publishModal">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="30" width="30"><path d="M12.2439 4C12.778 4.00294 14.1143 4.01586 15.5341 4.07273L16.0375 4.09468C17.467 4.16236 18.8953 4.27798 19.6037 4.4755C20.5486 4.74095 21.2913 5.5155 21.5423 6.49732C21.942 8.05641 21.992 11.0994 21.9982 11.8358L21.9991 11.9884L21.9991 11.9991C21.9991 11.9991 21.9991 12.0028 21.9991 12.0099L21.9982 12.1625C21.992 12.8989 21.942 15.9419 21.5423 17.501C21.2878 18.4864 20.5451 19.261 19.6037 19.5228C18.8953 19.7203 17.467 19.8359 16.0375 19.9036L15.5341 19.9255C14.1143 19.9824 12.778 19.9953 12.2439 19.9983L12.0095 19.9991L11.9991 19.9991C11.9991 19.9991 11.9956 19.9991 11.9887 19.9991L11.7545 19.9983C10.6241 19.9921 5.89772 19.941 4.39451 19.5228C3.4496 19.2573 2.70692 18.4828 2.45587 17.501C2.0562 15.9419 2.00624 12.8989 2 12.1625V11.8358C2.00624 11.0994 2.0562 8.05641 2.45587 6.49732C2.7104 5.51186 3.45308 4.73732 4.39451 4.4755C5.89772 4.05723 10.6241 4.00622 11.7545 4H12.2439ZM9.99911 8.49914V15.4991L15.9991 11.9991L9.99911 8.49914Z"></path></svg>
            </button>
            <a href="/" class="btn btn-secondary mt-4 rounded-5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" height="25" width="25"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 10.5858L9.17157 7.75736L7.75736 9.17157L10.5858 12L7.75736 14.8284L9.17157 16.2426L12 13.4142L14.8284 16.2426L16.2426 14.8284L13.4142 12L16.2426 9.17157L14.8284 7.75736L12 10.5858Z"></path></svg>
            </a>
        </div>
    </div>

    <!-- Importa script Bootstrap JS (facoltativo) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        const socket = io();

        // Mostra i progressi di stato inviati dal server
        socket.on('progress', function (message) {
            document.getElementById('progressSection').style.display = 'block';
            document.getElementById('progressMessage').textContent = message;
        });

        // Mostra il video una volta completato
        socket.on('videoCompleted', function (data) {
            document.getElementById('progressSection').style.display = 'none';
            document.getElementById('videoSection').style.display = 'block';
            document.getElementById('videoTitle').textContent = data.videoTitle;
            document.getElementById('createdVideo').src = data.videoUrl;

            // Memorizza il percorso assoluto del video generato
            generatedVideoPath = data.videoUrl; // Usa il percorso dinamico del video dal server

            // Popola automaticamente il campo titolo nel modal di pubblicazione
            $('#videoTitleModal').val(data.videoTitle);

            // Genera automaticamente i tag
            const videoTitle = data.videoTitle;
            const [artistString, songTitle] = videoTitle.split(' - ');
            if (artistString && songTitle) {
                const artists = artistString.split(',').map(a => a.trim().toLowerCase());
                const song = songTitle.trim().toLowerCase();

                // Generazione dei tag "sped up" e "slowed"
                const spedUpTags = artists.map(a => `${a} sped up`).concat(`${song} sped up`);
                const slowedTags = artists.map(a => `${a} slowed`).concat(`${song} slowed`);

                // Generazione di combinazioni aggiuntive
                const additionalTags = [];
                artists.forEach(artist => {
                    additionalTags.push(`${song} ${artist} slowed`);
                    additionalTags.push(`${song} ${artist} sped up`);
                });

                const tags = [...spedUpTags, ...slowedTags, ...additionalTags].join(', ');
                $('#videoTags').val(tags);
            } else {
                // Fallback se il formato non è "Artisti - Titolo"
                const keywords = videoTitle.split(' ').map(word => word.toLowerCase());
                const additionalTags = ['lyrics', 'slowed', 'sped up'];
                const tags = [...keywords, ...additionalTags].join(', ');
                $('#videoTags').val(tags);
            }

            // Fetch automaticamente le lyrics e aggiorna la descrizione
            fetch(`/get-lyrics?songTitle=${encodeURIComponent(videoTitle)}`)
                .then(response => response.json())
                .then(dataLyrics => {
                    if (dataLyrics.success) {
                        const lyricsUrl = dataLyrics.lyrics.url;
                        const existingDescription = $('#videoDescription').val();
                        $('#videoDescription').val(`${existingDescription}Lyrics: ${lyricsUrl}`);
                    } else {
                        console.log('Lyrics not found');
                    }
                })
                .catch(error => {
                    console.error('Error fetching lyrics:', error);
                });
        });

        // Ricerca automatica quando l'utente digita
        $('#songTitle').on('input', function () {
            let query = $(this).val();
            if (query.length > 2) {
                $.get('/search', { query }, function (data) {
                    $('#results').empty();
                    data.results.forEach(item => {
                        $('#results').append(`<a href="#" class="list-group-item list-group-item-action" 
                                                data-videoid="${item.id}" 
                                                data-title="${item.title}" 
                                                data-thumbnail="${item.thumbnailUrl}">${item.title}</a>`);
                    });
                });
            } else {
                $('#results').empty();
            }
        });

        // Quando l'utente seleziona un video
        $(document).on('click', '#results a', function (e) {
            e.preventDefault();

            let videoTitle = $(this).data('title');  // Titolo del video selezionato
            let videoId = $(this).data('videoid');
            let thumbnailUrl = $(this).data('thumbnail');

            // Popola i campi nascosti nel form
            $('#songTitle').val(videoTitle);
            $('#selectedVideoId').val(videoId);
            $('#selectedVideoTitle').val(videoTitle);
            $('#selectedVideoThumbnailUrl').val(thumbnailUrl);

            // Imposta il titolo del video come valore predefinito nel campo customText
            $('#customText').val(videoTitle); // Imposta il titolo della canzone come testo predefinito

            // Abilita il pulsante "Scarica Audio e Copertina"
            $('#downloadMediaButton').prop('disabled', false);

            // Svuota e nascondi i risultati della ricerca
            $('#results').empty();
            $('#results').hide();
        });

        // Scarica l'audio e la copertina
        $('#downloadMediaButton').on('click', function () {
            const videoId = $('#selectedVideoId').val();
            const videoTitle = $('#selectedVideoTitle').val();
            const thumbnailUrl = $('#selectedVideoThumbnailUrl').val();

            // Invia i dati al server per scaricare audio e copertina
            fetch('/download-and-modify', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    videoId: videoId,
                    videoTitle: videoTitle,
                    videoThumbnailUrl: thumbnailUrl,
                    socketId: socket.id
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Audio e copertina scaricati con successo. Ora puoi cercare album/singoli su Spotify.');
                    $('#customTextSection').show();  // Mostra la sezione per inserire il testo
                    $('#searchSpotifyAlbumsButton').show(); // Mostra il bottone per cercare album e singoli su Spotify
                } else {
                    alert('Errore durante il download dell\'audio o della miniatura.');
                }
            });
        });

        // Gestione slider per la velocità
        $('#speedRange').on('input', function() {
            $('#speedValue').text($(this).val());
        });

        // Gestione slider per il pitch
        $('#pitchRange').on('input', function() {
            $('#pitchValue').text($(this).val());
        });

        $('#backgroundColorSwitch').on('change', function() {
            const isPurpleBackground = $(this).is(':checked');
            
            // Update the label and handle background color based on the switch state
            if (isPurpleBackground) {
                $('#backgroundColorLabel').text('Slowed (Viola)');
            } else {
                $('#backgroundColorLabel').text('Spedup (Blu)');
            }
        });

        // Set the initial label when the page loads
        $(document).ready(function () {
            const isPurpleBackground = $('#backgroundColorSwitch').is(':checked');
            if (isPurpleBackground) {
                $('#backgroundColorLabel').text('Slowed (Viola)');
            } else {
                $('#backgroundColorLabel').text('Spedup (Blu)');
            }
        });

        // Handle video creation with background color
        $('#createVideoButton').on('click', function () {
            const customText = $('#customText').val();
            const videoTitle = $('#selectedVideoTitle').val();
            const speedFactor = $('#speedRange').val();  // Valore della velocità selezionato
            const pitchFactor = $('#pitchRange').val();  // Valore del pitch selezionato
            const isPurpleBackground = $('#backgroundColorSwitch').is(':checked');  // Check if the switch is checked
            const backgroundColor = isPurpleBackground ? 'purple' : 'blue';

            // Log to verify the color being sent
            console.log('Background Color:', backgroundColor);

            // Invia i dati per creare il video con il colore di sfondo
            fetch('/create-video', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    videoTitle: videoTitle,
                    customText: customText,
                    speedFactor: speedFactor,
                    pitchFactor: pitchFactor,
                    backgroundColor: backgroundColor, // Send background color based on switch state
                    socketId: socket.id
                })
            });

            // Mostra la sezione dei progressi
            document.getElementById('progressSection').style.display = 'block';
        });

        $(document).ready(function () {
            // Funzione per cercare singoli e album su Spotify e mostrarli nel modal
            $('#searchSpotifyAlbumsButton').on('click', function () {
                const query = $('#selectedVideoTitle').val();

                // Chiamata API per cercare singoli e album su Spotify
                $.get('/search-spotify', { query }, function (data) {
                    const results = data.results;
                    const albumResultsContainer = $('#albumResults');
                    albumResultsContainer.empty();

                    results.forEach(item => {
                        albumResultsContainer.append(`
                            <div class="col-md-4 col-sm-6 d-flex justify-content-center">
                                <div class="album-item">
                                    <img src="${item.coverUrl}" class="img-fluid rounded-5 mb-2">
                                    <button class="btn btn-primary select-album-button rounded-5">Seleziona</button>
                                </div>
                            </div>
                        `);
                    });

                    $('#albumModal').modal('show'); // Mostra il modal
                });
            });

            // Funzione per gestire la selezione di una copertina
            $(document).on('click', '.select-album-button', function () {
                const coverUrl = $(this).closest('.album-item').data('cover-url') || $(this).siblings('img').attr('src');
                const songTitle = $('#selectedVideoTitle').val(); // Titolo della canzone selezionata

                // Scarica la copertina selezionata e salvala nella cartella della canzone
                fetch('/download-cover', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ coverUrl: coverUrl, songTitle: songTitle })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Copertina scaricata con successo!');
                        $('#albumModal').modal('hide');
                    } else {
                        alert('Errore durante il download della copertina.');
                    }
                });
            });
        });

        $('#albumModal').on('shown.bs.modal', function () {
            const query = $('#selectedVideoTitle').val();
            
            // Effettua la ricerca quando il modal viene visualizzato
            $.get('/search-spotify', { query }, function (data) {
                const results = data.results;
                const albumResultsContainer = $('#albumResults');
                albumResultsContainer.empty();

                results.forEach(item => {
                    albumResultsContainer.append(`
                        <div class="album-item text-center" data-cover-url="${item.coverUrl}">
                            <img src="${item.coverUrl}" class="img-fluid rounded-5 mb-2" style="width: 150px; height: 150px;">
                            <p>${item.title}</p>
                            <button class="btn btn-primary select-album-button rounded-5">Seleziona</button>
                        </div>
                    `);
                });
            });
        });

        // Funzioni per modificare il titolo nel modal
        $('#addSpedUp').on('click', function () {
            const currentTitle = $('#videoTitleModal').val();
            const newTitle = `${currentTitle} 𝘀𝗽𝗲𝗱 𝘂𝗽`;
            $('#videoTitleModal').val(newTitle);
            generateTags(newTitle);
        });

        $('#addSlowedReverb').on('click', function () {
            const currentTitle = $('#videoTitleModal').val();
            const newTitle = `${currentTitle} 𝘀𝗹𝗼𝘄𝗲𝗱 + 𝗿𝗲𝘃𝗲𝗿𝗯`;
            $('#videoTitleModal').val(newTitle);
            generateTags(newTitle);
        });

        // Funzione per generare i tag in base al titolo del video
        function generateTags(videoTitle) {
            const [artistString, songTitle] = videoTitle.split(' - ');
            if (artistString && songTitle) {
                const artists = artistString.split(',').map(a => a.trim().toLowerCase());
                const song = songTitle.trim().toLowerCase();

                // Generazione dei tag "sped up" e "slowed"
                const spedUpTags = artists.map(a => `${a} sped up`).concat(`${song} sped up`);
                const slowedTags = artists.map(a => `${a} slowed`).concat(`${song} slowed`);

                // Generazione di combinazioni aggiuntive
                const additionalTags = [];
                artists.forEach(artist => {
                    additionalTags.push(`${song} ${artist} sped up`);
                    additionalTags.push(`${song} ${artist} slowed`);
                });

                const tags = [...spedUpTags, ...slowedTags, ...additionalTags].join(', ');
                $('#videoTags').val(tags);
            } else {
                // Fallback se il formato non è "Artisti - Titolo"
                const keywords = videoTitle.split(' ').map(word => word.toLowerCase());
                const additionalTags = ['lyrics', 'slowed', 'sped up'];
                const tags = [...keywords, ...additionalTags].join(', ');
                $('#videoTags').val(tags);
            }
        }

        // Funzione per fetchare nuovamente le lyrics dal modal
        $('#fetchLyricsButtonModal').on('click', function () {
            const songTitle = $('#videoTitleModal').val();

            if (songTitle) {
                fetch(`/get-lyrics?songTitle=${encodeURIComponent(songTitle)}`)
                    .then(response => response.json())
                    .then(dataLyrics => {
                        if (dataLyrics.success) {
                            const lyricsUrl = dataLyrics.lyrics.url;
                            const existingDescription = $('#videoDescription').val();
                            $('#videoDescription').val(`${existingDescription}\n\nLyrics: ${lyricsUrl}`);
                            alert('Lyrics aggiunte alla descrizione!');
                        } else {
                            alert('Lyrics non trovate.');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching lyrics:', error);
                        alert('Errore durante il fetch delle lyrics.');
                    });
            } else {
                alert('Inserisci un titolo per fetchare le lyrics.');
            }
        });

    </script>

<script>
    let searchTimeout = null;
  
    function searchCover() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const query = document.getElementById('coverSearchInput').value.trim();
        const resultsContainer = document.getElementById('coverResults');
        
        if (query.length > 2) { // Cerca solo se ci sono almeno 3 caratteri
          fetch(`/search-spotify?query=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
              resultsContainer.innerHTML = ''; // Pulisce i risultati precedenti
              if (data.results && data.results.length > 0) {
                data.results.forEach(item => {
                  const resultItem = document.createElement('div');
                  resultItem.className = 'cover-result-item';
                  resultItem.innerHTML = `
                    <img src="${item.coverUrl}" alt="${item.title}" width="100">
                    <p>${item.title}</p>
                  `;
                  // Aggiungi l'evento di clic per selezionare la copertina
                  resultItem.onclick = () => selectCover(item.coverUrl);
                  resultsContainer.appendChild(resultItem);
                });
              } else {
                resultsContainer.innerHTML = '<p>Nessun risultato trovato</p>';
              }
            })
            .catch(error => console.error('Errore durante la ricerca:', error));
        } else {
          resultsContainer.innerHTML = ''; // Libera i risultati se la query è vuota
        }
      }, 300); // Aggiungi un debounce di 300ms per ridurre le chiamate eccessive
    }
  
    function selectCover(coverUrl) {
      // Azioni per selezionare la copertina
      console.log('Copertina selezionata:', coverUrl);
      // Esempio: potresti aggiornare un campo nascosto o visualizzare la copertina selezionata
      document.getElementById('selectedCover').src = coverUrl; // Aggiorna l'immagine di copertina selezionata
      // Chiudi il modal se necessario
      closeModal(); // Funzione per chiudere il modal
    }
  
    function closeModal() {
      document.getElementById('coverModal').style.display = 'none'; // Chiudi il modal
    }
  </script>


    <script>
        let generatedVideoPath = ''; // Variabile per memorizzare il percorso del video generato
        let socketId = ''; // Aggiungi una variabile per memorizzare l'ID del socket

        // Cattura l'ID del socket
        socket.on('connect', function () {
            socketId = socket.id;
            console.log('Connected with socket id:', socketId);
        });

        // Gestisci il click sul bottone di pubblicazione
        document.getElementById('publishButton').addEventListener('click', async () => {
            const title = document.getElementById('videoTitleModal').value;
            const description = document.getElementById('videoDescription').value;
            const tags = document.getElementById('videoTags').value.split(',').map(tag => tag.trim());
            const privacy = document.getElementById('videoPrivacy').value;

            if (!generatedVideoPath) {
                alert('Percorso video non trovato! Assicurati che il video sia stato generato.');
                return;
            }

            if (!socketId) {
                alert('Socket non trovato! Riprova più tardi.');
                return;
            }

            try {
                const response = await fetch('/publish-video', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        videoPath: generatedVideoPath, // Invia il percorso del video al server
                        title: title,
                        description: description,
                        tags: tags,
                        privacy: privacy,
                        socketId: socketId // Invia anche l'ID del socket
                    })
                });

                if (!response.ok) {
                    throw new Error('Errore durante la pubblicazione su YouTube.');
                }

                alert('Video pubblicato con successo!');
                $('#publishModal').modal('hide');
            } catch (error) {
                console.error('Errore durante la pubblicazione:', error);
                alert('Errore durante la pubblicazione del video su YouTube.');
            }
        });

    </script>

</body>
</html>